// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

const TableNameDerivedGasOutput = "derived_gas_outputs"

// DerivedGasOutput mapped from table <derived_gas_outputs>
type DerivedGasOutput struct {
	Cid                string  `gorm:"column:cid;type:text;primaryKey" json:"cid"`                                    // CID of the message.
	From               string  `gorm:"column:from;type:text;not null" json:"from"`                                    // Address of actor that sent the message.
	To                 string  `gorm:"column:to;type:text;not null" json:"to"`                                        // Address of actor that received the message.
	Value              float64 `gorm:"column:value;type:numeric;not null" json:"value"`                               // The FIL value transferred (attoFIL) to the message receiver.
	GasFeeCap          float64 `gorm:"column:gas_fee_cap;type:numeric;not null" json:"gas_fee_cap"`                   // The maximum price that the message sender is willing to pay per unit of gas.
	GasPremium         float64 `gorm:"column:gas_premium;type:numeric;not null" json:"gas_premium"`                   // The price per unit of gas (measured in attoFIL/gas) that the message sender is willing to pay (on top of the BaseFee) to "tip" the miner that will include this message in a block.
	GasLimit           *int64  `gorm:"column:gas_limit;type:bigint" json:"gas_limit"`                                 // A hard limit on the amount of gas (i.e., number of units of gas) that a messageâ€™s execution should be allowed to consume on chain. It is measured in units of gas.
	SizeBytes          *int64  `gorm:"column:size_bytes;type:bigint" json:"size_bytes"`                               // Size in bytes of the serialized message.
	Nonce              *int64  `gorm:"column:nonce;type:bigint" json:"nonce"`                                         // The message nonce, which protects against duplicate messages and multiple messages with the same values.
	Method             *int64  `gorm:"column:method;type:bigint" json:"method"`                                       // The method number to invoke. Only unique to the actor the method is being invoked on. A method number of 0 is a plain token transfer - no method exectution.
	StateRoot          string  `gorm:"column:state_root;type:text;primaryKey" json:"state_root"`                      // CID of the parent state root.
	ExitCode           int64   `gorm:"column:exit_code;type:bigint;not null" json:"exit_code"`                        // The exit code that was returned as a result of executing the message. Exit code 0 indicates success. Codes 0-15 are reserved for use by the runtime. Codes 16-31 are common codes shared by different actors. Codes 32+ are actor specific.
	GasUsed            int64   `gorm:"column:gas_used;type:bigint;not null" json:"gas_used"`                          // A measure of the amount of resources (or units of gas) consumed, in order to execute a message.
	ParentBaseFee      float64 `gorm:"column:parent_base_fee;type:numeric;not null" json:"parent_base_fee"`           // The set price per unit of gas (measured in attoFIL/gas unit) to be burned (sent to an unrecoverable address) for every message execution.
	BaseFeeBurn        float64 `gorm:"column:base_fee_burn;type:numeric;not null" json:"base_fee_burn"`               // The amount of FIL (in attoFIL) to burn as a result of the base fee. It is parent_base_fee (or gas_fee_cap if smaller) multiplied by gas_used. Note: successful window PoSt messages are not charged this burn.
	OverEstimationBurn float64 `gorm:"column:over_estimation_burn;type:numeric;not null" json:"over_estimation_burn"` // The fee to pay (in attoFIL) for overestimating the gas used to execute a message. The overestimated gas to burn (gas_burned) is a portion of the difference between gas_limit and gas_used. The over_estimation_burn value is gas_burned * parent_base_fee.
	MinerPenalty       float64 `gorm:"column:miner_penalty;type:numeric;not null" json:"miner_penalty"`               // Any penalty fees (in attoFIL) the miner incured while executing the message.
	MinerTip           float64 `gorm:"column:miner_tip;type:numeric;not null" json:"miner_tip"`                       // The amount of FIL (in attoFIL) the miner receives for executing the message. Typically it is gas_premium * gas_limit but may be lower if the total fees exceed the gas_fee_cap.
	Refund             float64 `gorm:"column:refund;type:numeric;not null" json:"refund"`                             // The amount of FIL (in attoFIL) to refund to the message sender after base fee, miner tip and overestimation amounts have been deducted.
	GasRefund          int64   `gorm:"column:gas_refund;type:bigint;not null" json:"gas_refund"`                      // The overestimated units of gas to refund. It is a portion of the difference between gas_limit and gas_used.
	GasBurned          int64   `gorm:"column:gas_burned;type:bigint;not null" json:"gas_burned"`                      // The overestimated units of gas to burn. It is a portion of the difference between gas_limit and gas_used.
	Height             int64   `gorm:"column:height;type:bigint;primaryKey" json:"height"`                            // Epoch this message was executed at.
	ActorName          string  `gorm:"column:actor_name;type:text;not null" json:"actor_name"`                        // Human readable identifier for the type of the actor.
	ActorFamily        string  `gorm:"column:actor_family;type:text;not null" json:"actor_family"`
}

// TableName DerivedGasOutput's table name
func (*DerivedGasOutput) TableName() string {
	return TableNameDerivedGasOutput
}
