// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

const TableNameMinerLockedFund = "miner_locked_funds"

// MinerLockedFund mapped from table <miner_locked_funds>
type MinerLockedFund struct {
	Height            int64   `gorm:"column:height;type:bigint;primaryKey" json:"height"`                          // Epoch at which these details were added/changed.
	MinerID           string  `gorm:"column:miner_id;type:text;primaryKey" json:"miner_id"`                        // Address of the miner these details apply to.
	StateRoot         string  `gorm:"column:state_root;type:text;primaryKey" json:"state_root"`                    // CID of the parent state root at this epoch.
	LockedFunds       float64 `gorm:"column:locked_funds;type:numeric;not null" json:"locked_funds"`               // Amount of FIL (in attoFIL) locked due to vesting. When a Miner receives tokens from block rewards, the tokens are locked and added to the Miner's vesting table to be unlocked linearly over some future epochs.
	InitialPledge     float64 `gorm:"column:initial_pledge;type:numeric;not null" json:"initial_pledge"`           // Amount of FIL (in attoFIL) locked due to it being pledged as collateral. When a Miner ProveCommits a Sector, they must supply an "initial pledge" for the Sector, which acts as collateral. If the Sector is terminated, this deposit is removed and burned along with rewards earned by this sector up to a limit.
	PreCommitDeposits float64 `gorm:"column:pre_commit_deposits;type:numeric;not null" json:"pre_commit_deposits"` // Amount of FIL (in attoFIL) locked due to it being used as a PreCommit deposit. When a Miner PreCommits a Sector, they must supply a "precommit deposit" for the Sector, which acts as collateral. If the Sector is not ProveCommitted on time, this deposit is removed and burned.
}

// TableName MinerLockedFund's table name
func (*MinerLockedFund) TableName() string {
	return TableNameMinerLockedFund
}
