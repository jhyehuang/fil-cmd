// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

const TableNameMinerInfo = "miner_infos"

// MinerInfo mapped from table <miner_infos>
type MinerInfo struct {
	Height                  int64   `gorm:"column:height;type:bigint;primaryKey" json:"height"`                                     // Epoch at which this miner info was added/changed.
	MinerID                 string  `gorm:"column:miner_id;type:text;primaryKey" json:"miner_id"`                                   // Address of miner this info applies to.
	StateRoot               string  `gorm:"column:state_root;type:text;primaryKey" json:"state_root"`                               // CID of the parent state root at this epoch.
	OwnerID                 string  `gorm:"column:owner_id;type:text;not null" json:"owner_id"`                                     // Address of actor designated as the owner. The owner address is the address that created the miner, paid the collateral, and has block rewards paid out to it.
	WorkerID                string  `gorm:"column:worker_id;type:text;not null" json:"worker_id"`                                   // Address of actor designated as the worker. The worker is responsible for doing all of the work, submitting proofs, committing new sectors, and all other day to day activities.
	NewWorker               *string `gorm:"column:new_worker;type:text" json:"new_worker"`                                          // Address of a new worker address that will become effective at worker_change_epoch.
	WorkerChangeEpoch       int64   `gorm:"column:worker_change_epoch;type:bigint;not null" json:"worker_change_epoch"`             // Epoch at which a new_worker address will become effective.
	ConsensusFaultedElapsed int64   `gorm:"column:consensus_faulted_elapsed;type:bigint;not null" json:"consensus_faulted_elapsed"` // The next epoch this miner is eligible for certain permissioned actor methods and winning block elections as a result of being reported for a consensus fault.
	PeerID                  *string `gorm:"column:peer_id;type:text" json:"peer_id"`                                                // Current libp2p Peer ID of the miner.
	ControlAddresses        *string `gorm:"column:control_addresses;type:jsonb" json:"control_addresses"`                           // JSON array of control addresses. Control addresses are used to submit WindowPoSts proofs to the chain. WindowPoSt is the mechanism through which storage is verified in Filecoin and is required by miners to submit proofs for all sectors every 24 hours. Those proofs are submitted as messages to the blockchain and therefore need to pay the respective fees.
	MultiAddresses          *string `gorm:"column:multi_addresses;type:jsonb" json:"multi_addresses"`                               // JSON array of multiaddrs at which this miner can be reached.
	SectorSize              int64   `gorm:"column:sector_size;type:bigint;not null" json:"sector_size"`
}

// TableName MinerInfo's table name
func (*MinerInfo) TableName() string {
	return TableNameMinerInfo
}
